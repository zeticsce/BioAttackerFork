import os
import shutil
import string
import requests
import random
import subprocess
import sys
import datetime
import re
import time
import json
import copy

from app import dp, bot, query, strconv, save_message, is_host, IsAdmin
from config import MYSQL_HOST
from Labs import Labs

labs = Labs()

from commands.improvements import *
from commands.BioTop import *
from commands.BioLab import *
from commands.AddUsersToDB import *
from commands.Attack import *
from commands.issues import *
from commands.messages import *
from commands.rp_module import *
from commands.corps import *


from aiogram import Bot, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from math import ceil, floor

work_path = os.path.abspath(os.curdir)


if requests.get('https://ip.beget.ru/').text.replace(' ', '').replace('\n', '') == MYSQL_HOST: # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /git –∏ /restar —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
    @dp.message_handler(commands=["git"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        git_message = await bot.send_message(message.chat.id, "ü™õ *–û–∂–∏–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...*", parse_mode="Markdown")

        pull_result = subprocess.Popen(["git", "pull", "https://github.com/kawasaji/BioAttacker"], stdout=subprocess.PIPE, text=True, stderr=subprocess.PIPE)
        output, errors = pull_result.communicate(input="Hello from the other side!")
        pull_result.wait()
        await bot.edit_message_text(f"ü™õ *–û–∂–∏–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...\n–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n`{output}`", git_message.chat.id, git_message.message_id, parse_mode="Markdown")
        if "Already up to date.\n" != output:
            await bot.send_message(message.chat.id, f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")

            try:
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
            except: pass

            os.system(f"python {work_path}/app.py &")
            sys.exit(0)
        else: await bot.send_message(message.chat.id, f"*–§–∞–π–ª—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!*", parse_mode="Markdown")
    @dp.message_handler(commands=["restart"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        await bot.send_message(message.chat.id, f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")

        try:
            dp.stop_polling()
            await dp.wait_closed()
            await bot.close()
        except: pass


        os.system(f"python {work_path}/app.py &")
        sys.exit(0)

@dp.message_handler(commands=["exit"], commands_prefix='.')
async def hi_there(message: types.message):
    if message['from']['id'] not in [780882761, 1058211493]: return
    await bot.send_message(message.chat.id, f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")
    sys.exit(0)

@dp.message_handler(commands=["start"], commands_prefix='!/.')
async def hi_there(message: types.message):
    text = random.choice(start_text)
    text += "[–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞](https://teletype.in/@kawasaji/commands_of_bio-cmo)"
    await bot.send_message(message.chat.id, text=text, parse_mode="Markdown")


@dp.message_handler(commands=["export", "exp"], commands_prefix='!/.')
async def handler(message: types.message):
    """
        –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /export <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>
        –ü—Ä–æ—Å—Ç–æ /export —Å–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    """
    if message['from']['id'] not in [780882761, 1058211493]: return
    message.text = message.text.split(" ")
    message.text.pop(0)
    message.text = ' '.join(message.text).replace("\\", "/").replace(" ", "")
    if message.text == '' or message.text == '/':
        await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path), filename='BioAttacker.zip'))
        os.remove(work_path + "/files.zip")
    else:
        if not message.text.startswith('/'): message.text = "/" + message.text
        if os.path.exists(work_path + message.text):
            if not os.path.isfile(work_path + message.text):
                await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path + message.text),  filename=message.text + ".zip"))
                os.remove(work_path + "/files.zip")
            else:
                await bot.send_document(message.chat.id,  InputFile(work_path + message.text, filename=message.text))
        else: await bot.send_message(message.chat.id, f"ü™õ –ü—É—Ç—å `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message_handler(content_types=["text"]) 
async def handler(message: types.message):

    if message.text.lower() == "–±–∏–æ":
        await bot.send_message(message.chat.id, f"*–ë–æ—Ç –Ω–∞ –º–µ—Å—Ç–µ*", parse_mode='Markdown')

    if message.text.lower() == "-–≤–∏—Ä—É—Å":
        lab = labs.get_lab(message['from']['id'])
        if lab.has_lab: 
            lab.patogen_name = None
            lab.save()

            await bot.send_message(message.chat.id, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–æ–≥–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–æ.")

    if message.text.lower() == "-–ª–∞–±":
        lab = labs.get_lab(message['from']['id'])
        if lab.has_lab: 
            lab.lab_name = None
            lab.save()

            await bot.send_message(message.chat.id, "‚úÖ –ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ.")

    if message.text.lower().startswith("+–ª–∞–± "):

        lab = labs.get_lab(message['from']['id'])
        if lab.has_lab: 
            labName = message.text[5::].strip()

            if len(labName) > 30:
                await bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤")
                return
            if len(labName) == 0:
                await bot.send_message(message.chat.id, "–ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
            if re.fullmatch(r"([a-zA-Z–∞-—è–ê-–Ø0-9_\s,.!?]*)", labName) == None: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
                await bot.send_message(message.chat.id, "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return

            this_name_lab = query(f"SELECT * FROM `bio_attacker`.`labs` WHERE `lab_name` = '{strconv.escape_sql(labName)}'")
            if len(this_name_lab) != 0:
                if this_name_lab[0]['user_id'] != lab.user_id:
                    await bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    lab.save()
                    return

            lab.lab_name = labName
            lab.save()

            await bot.send_message(message.chat.id, "‚úÖ –ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    if message.text.lower().startswith("+–≤–∏—Ä—É—Å "):

        lab = labs.get_lab(message['from']['id'])
        if lab.has_lab: 
            patName = message.text[7::].strip()

            if len(patName) > 50:
                await bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏—Ä—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª–æ–≤")
                return
            if len(patName) == 0:
                await bot.send_message(message.chat.id, "–í–∏—Ä—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
            if re.fullmatch(r"([a-zA-Z–∞-—è–ê-–Ø0-9_\s,.!?]*)", patName) == None: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞
                await bot.send_message(message.chat.id, "–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!")
                return
            virus_lab = query(f"SELECT * FROM `bio_attacker`.`labs` WHERE `patogen_name` = '{strconv.escape_sql(patName)}'")
            if len(virus_lab) != 0:
                if virus_lab[0]['user_id'] != lab.user_id:
                    await bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –≤–∏—Ä—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return

            lab.patogen_name = patName
            lab.save()

            await bot.send_message(message.chat.id, "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç–æ–≥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    if message.text.lower() == "+–≤–∏—Ä—É—Å—ã":
        lab = labs.get_lab(message['from']['id'])
        if lab.has_lab: 
            lab.virus_chat = message.chat.id
            lab.save()
            await bot.send_message(message.chat.id, text="–°–æ–æ–±—â–µ–Ω–∏—è —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —ç—Ç–æ—Ç —á–∞—Ç", parse_mode="Markdown")

    if message.text.lower() in ("–±–∏–æ–∂–µ—Ä—Ç–≤—ã", "–±–∏–æ–µ–∂–∞"):
        lab = labs.get_lab(message['from']['id'])
        
        text = f'–ñ–µ—Ä—Ç–≤—ã –∏–≥—Ä–æ–∫–∞ <a href="tg://openmessage?user_id={message.from_user.id}">{strconv.normalaze(message.from_user.first_name, replace=str(message["from"]["id"]))}</a>\n\n'
        profit = 0

        count = 0
        victims = lab.get_victums()
        actual = 0
        for item in list(reversed(victims)):
            if item['until_infect'] > int(time.time()):
                actual += 1
                profit += item["profit"]
                if count < 50: 
                    
                    name = strconv.normalaze(item["name"], replace=str(item["user_id"]))
                    until = datetime.datetime.fromtimestamp(item['until_infect']).strftime("%d.%m.%Y")
                    text += f'{count + 1}. <a href="tg://openmessage?user_id={item["user_id"]}">{name}</a> | +{item["profit"]} | –¥–æ {until}\n'

                count += 1
        
        text += f'\nü§í –ò—Ç–æ–≥–æ {actual} –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö'
        text += f'\nüß¨ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: +{strconv.format_nums(profit)} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ '

        
        victims_keyboard = types.InlineKeyboardMarkup(row_width=1)
        victims_keyboard.row(
            types.InlineKeyboardButton('‚ùå', callback_data=vote_cb.new(action='delete msg', id=message['from']['id'], chat_id=message['chat']['id'])),
        )


        await bot.send_message(message.chat.id, text=text, parse_mode="HTML", reply_markup=victims_keyboard)

    if message.text.lower() in ("–±–∏–æ—Ñ–µ—Ä–º–∞", "–±–∏–æ—Ñ–∞—Ä–º–∞", "–±–∏–æ—Ñ–∞", "–º–∞–π–Ω"):
        
        lab = labs.get_lab(message['from']['id'])
        if lab.last_farma + (60*60) > int(time.time()):
            minuts = 60 - int((int(time.time()) - lab.last_farma)/60)
            if minuts <= 20:
                if minuts == 1: declination = "–º–∏–Ω—É—Ç–∞"
                elif minuts <= 4: declination = "–º–∏–Ω—É—Ç—ã"
                else: declination = "–º–∏–Ω—É—Ç"
            else: 
                if minuts%10 == 1: declination = "–º–∏–Ω—É—Ç–∞"
                elif minuts%10 <= 4: declination = "–º–∏–Ω—É—Ç—ã"
                else: declination = "–º–∏–Ω—É—Ç"

            await bot.send_message(message.chat.id, text=f'–û–∂–∏–¥–∞–π—Ç–µ –µ—â–µ {minuts} {declination} –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞—Ä–º—ã!!', parse_mode="Markdown")
            lab.save()
            return
        
        profit = random.randint(20, 200)

        lab.coins += profit
        lab.last_farma = int(time.time())
        lab.save()

        text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ñ–∞—Ä–º–∏–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {profit} –∫–æ–∏–Ω–æ–≤ üí∞!'

        await bot.send_message(message.chat.id, text=text, parse_mode="Markdown")

    if message.text.lower() in ("–±–∏–æ–º–µ—à", "–±–∏–æ–º–µ—à–æ–∫", "–±–∏–æ–±–∞–ª–∞–Ω—Å", "–∫–æ–∏–Ω—ã"):

        lab = labs.get_lab(message['from']['id'])

        text = f'–ú–µ—à–æ–∫ –∏–≥—Ä–æ–∫–∞ [{message.from_user.first_name}](tg://openmessage?user_id={message.from_user.id})\n\n'\
               f'–ö–æ–∏–Ω—ã: _{lab.coins}_ üí∞\n' \
               f'–ë–∏–æ-–∫–æ–∏–Ω—ã: _{lab.bio_valuta}_ ü•ë'

        await bot.send_message(message.chat.id, text=text, parse_mode="Markdown")

    
    if message.text.lower() == "–±–∏–æ—Ö–µ–ª–ø":
        await bot.send_message(message.chat.id, f"[–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞](https://teletype.in/@kawasaji/commands_of_bio-cmo)", parse_mode="Markdown")

    reg = re.fullmatch(r'[\./!]–∏–¥(\s([@./:\\a-z0-9_?=]+))?', message.text.lower())
    if reg != None:
        url = reg.group(2)
        name = None
        if url != None:
            clear_url = url.replace(" ", "").replace("@", "").replace("tg://openmessage?user_id=", "").replace("tg://user?id=", "").replace("https://t.me/", "").replace("t.me/", "")
            if re.fullmatch(r"[a-z0-9_]+", clear_url) != None:
                user = labs.get_user(clear_url)
                if user != None:
                    name = strconv.normalaze(user['name'], str(user['user_id']))
                    user_id = user['user_id']
        elif message.reply_to_message:
            name = strconv.normalaze(message.reply_to_message.from_user.first_name, str(message.reply_to_message.from_user.id))
            user_id = message.reply_to_message.from_user.id
        else:
            name = strconv.normalaze(message.from_user.first_name, str(message.from_user.id))
            user_id = message.from_user.id
        if name != None:
            text = f'üåä –ê–π–¥–∏ –∏–≥—Ä–æ–∫–∞ <a href="tg://openmessage?user_id={user_id}">{name}</a> —Ä–∞–≤–µ–Ω <code>@{user_id}</code>'
            await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="HTML", reply_to_message_id=message.message_id)
        elif url != None:
            await bot.send_message(chat_id=message.chat.id, text="–Æ–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode="HTML", reply_to_message_id=message.message_id)


vote_cb = CallbackData('vote', 'action', 'id', 'chat_id')

def back_btn(message: types.Message, usid):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_markup.row(
        types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=vote_cb.new(action='desc', id=usid, chat_id=message.chat.id)),

    )

    return keyboard_markup

def first_change_theme_btn(message: types.Message, usid):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_markup.row(
        types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å', callback_data=vote_cb.new(action='choose', id=usid, chat_id=message.chat.id)),
        types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è', callback_data=vote_cb.new(action='desc', id=usid, chat_id=message.chat.id)),

    )

    keyboard_markup.add(
        types.InlineKeyboardButton(text='‚ùå', callback_data=vote_cb.new(action='close', id=usid, chat_id=message.chat.id)),
    )



    return keyboard_markup

def second_change_theme_btn(message: types.Message, usid):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_markup.row(
        types.InlineKeyboardButton(text='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞', callback_data=vote_cb.new(action='desc_standard', id=usid, chat_id=message.chat.id)),
        

    )
    keyboard_markup.add(
        types.InlineKeyboardButton(text='üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∞—è —Ç–µ–º–∞', callback_data=vote_cb.new(action='desc_azeri', id=usid, chat_id=message.chat.id)),
    )
    keyboard_markup.add(
        types.InlineKeyboardButton(text='–•–µ–ª–ª–æ—É–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞', callback_data=vote_cb.new(action='desc_hell', id=usid, chat_id=message.chat.id)),
    )

    keyboard_markup.add(
        types.InlineKeyboardButton(text='üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞', callback_data=vote_cb.new(action='desc_ukraine', id=usid, chat_id=message.chat.id)),
    )

    keyboard_markup.add(
        types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=vote_cb.new(action='back', id=usid, chat_id=message.chat.id)),
    )

    return keyboard_markup

def change_theme_btn(message: types.Message, usid):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_markup.row(
        types.InlineKeyboardButton(text='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è', callback_data=vote_cb.new(action='standard', id=usid, chat_id=message.chat.id)),
        types.InlineKeyboardButton(text='üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∞—è', callback_data=vote_cb.new(action='azeri', id=usid, chat_id=message.chat.id)),
        types.InlineKeyboardButton(text='–•–µ–ª–ª–æ—É–∏–Ω—Å–∫–∞—è', callback_data=vote_cb.new(action='hell', id=usid, chat_id=message.chat.id)),
        types.InlineKeyboardButton(text='üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è', callback_data=vote_cb.new(action='ukraine', id=usid, chat_id=message.chat.id)),
    )

    keyboard_markup.add(
        types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=vote_cb.new(action='back', id=usid, chat_id=message.chat.id)),
    )


    return keyboard_markup

@dp.message_handler(commands=["—Ç–µ–º–∞", "—Ç"], commands_prefix='!/.')
async def handler(message: types.message):

    await bot.send_message(message.chat.id, "–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?)", reply_markup=first_change_theme_btn(message, message.from_user.id))

@dp.callback_query_handler(vote_cb.filter(action='back'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):

        await bot.edit_message_text(chat_id=chat_id, text="–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?)", message_id=query.message.message_id, reply_markup=first_change_theme_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='desc_standard'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['standard']['theme_name']}\n\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['standard']['theme_desc']}"
        await bot.edit_message_text(chat_id=chat_id, text=text, message_id=query.message.message_id, reply_markup=back_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='desc_ukraine'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['ukraine']['theme_name']}\n\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['ukraine']['theme_desc']}"
        await bot.edit_message_text(chat_id=chat_id, text=text, message_id=query.message.message_id, reply_markup=back_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='desc_azeri'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['azeri']['theme_name']}\n\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['azeri']['theme_desc']}"
        await bot.edit_message_text(chat_id=chat_id, text=text, message_id=query.message.message_id, reply_markup=back_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")
    
@dp.callback_query_handler(vote_cb.filter(action='desc_hell'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['hell']['theme_name']}\n\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã: {theme['hell']['theme_desc']}"
        await bot.edit_message_text(chat_id=chat_id, text=text, message_id=query.message.message_id, reply_markup=back_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='desc'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        await bot.edit_message_text(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ", message_id=query.message.message_id, reply_markup=second_change_theme_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='close'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        await bot.delete_message(chat_id, query.message.message_id)
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='choose'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    chat_id = callback_data["chat_id"]
    from_user_id = callback_data["id"]
    if from_user_id == str(query.from_user.id):
        await bot.edit_message_text(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", message_id=query.message.message_id, reply_markup=change_theme_btn(query.message, from_user_id))
    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")
    # await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", reply_markup=change_theme_btn(query.message))  

@dp.callback_query_handler(vote_cb.filter(action='standard'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    from_user_id = callback_data["id"]
    chat_id = callback_data["chat_id"]
    lab = labs.get_lab(from_user_id)
    if from_user_id == str(query.from_user.id):
        if lab.theme == None:

            await bot.edit_message_text(chat_id=chat_id, text="–£ –≤–∞—Å –∏ —Ç–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞!", message_id=query.message.message_id)
            return
        else:
            lab.theme = None
            lab.save()
            await bot.edit_message_text(chat_id=chat_id, text="‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", message_id=query.message.message_id)

    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='ukraine'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    from_user_id = callback_data["id"]
    chat_id = callback_data["chat_id"]
    lab = labs.get_lab(from_user_id)
    if from_user_id == str(query.from_user.id):
        if lab.theme == "ukraine":

            await bot.edit_message_text(chat_id=chat_id, text="–£ –≤–∞—Å —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ç–µ–º–∞!", message_id=query.message.message_id)
            return
        else:
            lab.theme = "ukraine"
            lab.save()
            await bot.edit_message_text(chat_id=chat_id, text="‚úÖ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–µ–º—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", message_id=query.message.message_id)

    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")
    
@dp.callback_query_handler(vote_cb.filter(action='azeri'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    from_user_id = callback_data["id"]
    chat_id = callback_data["chat_id"]
    lab = labs.get_lab(from_user_id)
    if from_user_id == str(query.from_user.id):
        if lab.theme == "azeri":

            await bot.edit_message_text(chat_id=chat_id, text="–£ –≤–∞—Å –∏ —Ç–∞–∫ –∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∞—è —Ç–µ–º–∞!", message_id=query.message.message_id)
            return
        else:
            lab.theme = "azeri"
            lab.save()
            await bot.edit_message_text(chat_id=chat_id, text="‚úÖ –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", message_id=query.message.message_id)

    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.callback_query_handler(vote_cb.filter(action='hell'))
async def change_theme(query: types.CallbackQuery, callback_data: dict):
    from_user_id = callback_data["id"]
    chat_id = callback_data["chat_id"]
    lab = labs.get_lab(from_user_id)
    if from_user_id == str(query.from_user.id):
        if lab.theme == "hell":

            await bot.edit_message_text(chat_id=chat_id, text="–£ –≤–∞—Å –∏ —Ç–∞–∫ —Ö–µ–ª–ª–æ—É–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞!", message_id=query.message.message_id)
            return
        else:
            lab.theme = "hell"
            lab.save()
            await bot.edit_message_text(chat_id=chat_id, text="‚úÖ –•–µ–ª–ª–æ—É–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", message_id=query.message.message_id)

    else:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è :)")

@dp.edited_message_handler()
async def other(message):
    save_message(message)
